package main

import (
	"bytes"
	"io/ioutil"
	"strings"
	"unicode/utf8"
	"unsafe"
)

type AutoGenerated struct {
	Data struct {
		CorrelationID string `json:"correlationId"`
		Products      []struct {
			SkuNumber   string `json:"sku_number"`
			Description string `json:"description"`
			Title       string `json:"title"`
			ColorCode   string `json:"color_code"`
			Style       string `json:"style"`
			Attributes  struct {
				Category struct {
					AttributeType string `json:"attribute_type"`
					Label         string `json:"label"`
					Value         string `json:"value"`
				} `json:"category"`
				Classification struct {
					AttributeType string `json:"attribute_type"`
					Label         string `json:"label"`
					Value         string `json:"value"`
				} `json:"classification"`
				ColorName struct {
					AttributeType string `json:"attribute_type"`
					Label         string `json:"label"`
					Value         string `json:"value"`
				} `json:"color_name"`
				CountryOfOrigin struct {
					AttributeType string `json:"attribute_type"`
					Label         string `json:"label"`
					Value         string `json:"value"`
				} `json:"country_of_origin"`
				Department struct {
					AttributeType string `json:"attribute_type"`
					Label         string `json:"label"`
					Value         string `json:"value"`
				} `json:"department"`
				Division struct {
					AttributeType string `json:"attribute_type"`
					Label         string `json:"label"`
					Value         string `json:"value"`
				} `json:"division"`
				FabricContent struct {
					AttributeType string `json:"attribute_type"`
					Label         string `json:"label"`
					Value         string `json:"value"`
				} `json:"fabric_content"`
				Gender struct {
					AttributeType string `json:"attribute_type"`
					Label         string `json:"label"`
					Value         string `json:"value"`
				} `json:"gender"`
				Plant struct {
					AttributeType string `json:"attribute_type"`
					Label         string `json:"label"`
					Value         string `json:"value"`
				} `json:"plant"`
				Season struct {
					AttributeType string `json:"attribute_type"`
					Label         string `json:"label"`
					Value         string `json:"value"`
				} `json:"season"`
				StyleName struct {
					AttributeType string `json:"attribute_type"`
					Label         string `json:"label"`
					Value         string `json:"value"`
				} `json:"style_name"`
			} `json:"attributes,omitempty"`
		} `json:"products"`
	} `json:"data"`
	Meta struct {
		Type       string      `json:"type"`
		Errors     interface{} `json:"errors"`
		Warnings   interface{} `json:"warnings"`
		Pagination struct {
			CurrentOffset string      `json:"currentOffset"`
			NextOffset    interface{} `json:"nextOffset"`
		} `json:"pagination"`
	} `json:"meta"`
}

func main() {
	file, err := ioutil.ReadFile("/home/xdev/Downloads/invalid_2.jsont")
	if err != nil {
		panic(err)
	}

	file = bytes.ReplaceAll(file, []byte{194, 160}, []byte{' '})

	ss := bytesToString(file)
	println(ss)

	//sss := string(file)
	//println(sss)
	//
	str := strings.ToValidUTF8(string(file), "")
	println(str)

	println(utf8.RuneCount(file))
	//data, err := json.Marshal(&str)
	//if err != nil {
	//	panic(err)
	//}
	//
	//err = ioutil.WriteFile("./file", data, 777)
	//if err != nil {
	//	panic(err)
	//}



	sss := strings.Map(func(r rune) rune {
		if r == utf8.RuneError {
			println("rune")
			return -1
		}
		return r
	}, string(file))

	println(sss)
}

func bytesToString(b []byte) string {
	return *(*string)(unsafe.Pointer(&b))
}
